Chromium recipe
===============

This recipe provides a package for the Chromium web browser. It strives to
always follow the latest stable Linux release as listed in
https://omahaproxy.appspot.com

We refer to the web browser as Chromium, not Chrome, because "Chrome" is
Google's version of the web browser with proprietary content on top of the
open-source Chromium browser.

Since Chromium 58.0.3029.81, there is a build-time dependency on nodejs, which
is run on the host to preprocess a few files. This recipe has been tested with
the nodejs recipe from https://github.com/ostroproject/meta-iot-web.

Compared to a usual, smaller recipe, the Chromium recipe has a few
peculiarities:
- When DEBUG_BUILD is set, the Chromium binary is built with fewer debug
  symbols on 32-bit target architectures (i.e. the compiler is passed "-g1"
  instead of "-g"), as a binary with full debugging symbols is too big (~5Gb as
  of M58) for the information to be properly contained in the ELF32 headers of
  the binary, which breaks binutils and file(1).
- We manually patch parts of the build system to replace Chromium's bundled
  copies of some packages (flac, libjpeg and others) with system-wide ones.
- Parts of the V8 (Chromium's JavaScript engine) build need to run binaries
  built for the target, for which we use QEMU.

The "proprietary-codecs" PACKAGECONFIG option builds Chromium with support for
non-free multimedia codecs, such as H.264 and others. It is your responsibility
to make sure you are complying with the codecs' licensing terms.

Note: by default, Chromium will refuse to execute if run as root. During
testing, one can bypass the check by passing "--no-sandbox" to the chromium
binary. In production, one should NEVER run Chromium as root, but rather use a
separate, unprivileged user instead.

Google API keys
---------------
Some Chromium features use Google APIs, and to access those APIs either an API
Key or a set of OAuth 2.0 tokens is required. Setting up API keys is optional.

If you don't do it, the specific APIs using Google services won't work in your
build, but all other features will run normally.

By default, we build Chromium with invalid keys to avoid the "Google API keys
are missing" error message in the browser's infobar. If you have your own API
keys, you need to set the GOOGLE_API_KEY, GOOGLE_DEFAULT_CLIENT_ID and
GOOGLE_DEFAULT_CLIENT_SECRET appropriately in your local.conf.

For more information, see https://dev.chromium.org/developers/how-tos/api-keys.
